{"version":3,"sources":["components/SelectionForm.tsx","components/CatImage.tsx","components/ActionRow.tsx","redux/breed/BreedTypes.tsx","redux/breed/BreedActions.tsx","redux/cat/CatTypes.tsx","redux/cat/CatActions.tsx","cats/Index.tsx","cats/Show.tsx","App.tsx","reportWebVitals.ts","redux/breed/BreedReducer.tsx","redux/cat/CatReducer.tsx","redux/store.tsx","index.tsx"],"names":["SelectionForm","Form","Group","controlId","Label","Control","as","custom","onChange","this","props","wasChanged","value","selectedBreed","disabled","breeds","length","map","breed","id","name","Component","CatImage","Col","md","span","sm","Card","className","Img","variant","src","catDetails","url","Body","to","ActionRow","Row","Button","isLoading","isDisabled","onClick","wasClicked","FETCH_BREEDS_REQUEST","FETCH_BREEDS_SUCCESS","FETCH_BREEDS_FAILURE","SELECT_BREED","fetchBreeds","dispatch","type","options","headers","process","REACT_APP_CAT_API_KEY","axios","get","then","response","data","payload","catch","error","fetchBreedsFailure","message","FETCH_CATS_REQUEST","FETCH_CATS_SUCCESS","FETCH_CATS_FAILURE","INCREMENT_PAGINATION_PAGE","SELECTED_BREED_CHANGE","fetchCats","breed_id","page","params","order","limit","cats","fetchCatsFailure","Index","onSelectBreed","event","a","target","selectBreed","selectedBreedChange","paginationPage","Container","cat","canLoadMore","loading","connect","state","breedError","catError","Show","Header","Title","origin","temperament","Text","description","image_id","match","setState","console","log","find","fetchCatImage","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","action","store","createStore","combineReducers","breedReducer","catReducer","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.297f57c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport { Breed } from '../interfaces';\n\ninterface Props {\n  wasChanged: (event: React.ChangeEvent<any>) => void,\n  selectedBreed: string,\n  breeds: Array<Breed>\n}\n\nexport default class SelectionForm extends Component<Props> {\n  render() {\n    return (\n      <Form>\n        <Form.Group controlId=\"breedSelection\">\n          <Form.Label>Breed</Form.Label>\n          <Form.Control as=\"select\" custom onChange={this.props.wasChanged} value={ this.props.selectedBreed} disabled={this.props.breeds.length === 0}>\n            <option value=\"DEFAULT\" disabled>Select breed</option>\n            {this.props.breeds.map((breed: Breed) => (\n              <option key={breed.id} value={breed.id}>{breed.name}</option>\n            ))} \n          </Form.Control>\n        </Form.Group>\n      </Form>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport { Link } from 'react-router-dom';\nimport { CatDetails } from '../interfaces';\n\ninterface Props {\n  catDetails: CatDetails\n}\n\nexport default class CatImage extends Component<Props> {\n  render() {\n    return (\n      <Col md={{ span: 3 }} sm={{ span: 6}}>\n        <Card className=\"mb-3\">\n          <Card.Img variant=\"top\" src={this.props.catDetails.url} />\n          <Card.Body>\n            <Link to={ \"/\" + this.props.catDetails.id } className=\"btn btn-primary btn-block\">View details</Link>\n          </Card.Body>\n        </Card>\n      </Col>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\n\ninterface Props {\n  isLoading: boolean,\n  isDisabled: boolean,\n  wasClicked: () => void,\n}\n\nexport default class ActionRow extends Component<Props> {\n  render() {\n    return (\n      <Row>\n        <Col>\n          <Button\n            variant=\"success\"\n            disabled={this.props.isLoading || this.props.isDisabled}\n            onClick={this.props.wasClicked}\n            className=\"mt-3\"\n          >\n            {this.props.isLoading ? 'Loading cats…' : 'Load more'}\n          </Button>{' '}\n        </Col>\n      </Row>\n    )\n  }\n}\n","export const FETCH_BREEDS_REQUEST = 'FETCH_BREEDS_REQUEST'\nexport const FETCH_BREEDS_SUCCESS = 'FETCH_BREEDS_SUCCESS'\nexport const FETCH_BREEDS_FAILURE = 'FETCH_BREEDS_FAILURE'\nexport const SELECT_BREED = 'SELECT_BREED'\n","import {\n  FETCH_BREEDS_REQUEST,\n  FETCH_BREEDS_SUCCESS,\n  FETCH_BREEDS_FAILURE,\n  SELECT_BREED\n} from './BreedTypes'\nimport { Breed } from '../../interfaces';\nimport { AppDispatch } from '../../redux/store';\nimport axios from 'axios';\n\nexport const fetchBreedsRequest = () => {\n  return {\n    type: FETCH_BREEDS_REQUEST\n  }\n}\n\nexport const fetchBreedsSuccess = (breeds: Array<Breed>) => {\n  return {\n    type: FETCH_BREEDS_SUCCESS,\n    payload: breeds\n  }\n}\n\nexport const fetchBreedsFailure = (error: string) => {\n  return {\n    type: FETCH_BREEDS_FAILURE,\n    payload: error\n  }\n}\n\nexport const selectBreed = (breed_id: string) => {\n  return {\n    type: SELECT_BREED,\n    payload: breed_id\n  }\n}\n\nexport const fetchBreeds = () => {\n  return (dispatch: AppDispatch) => {\n    dispatch(fetchBreedsRequest())\n    const options = {\n      headers: {'x-api-key': process.env.REACT_APP_CAT_API_KEY}\n    };\n    axios.get('https://api.thecatapi.com/v1/breeds', options)\n      .then(response => {\n        dispatch(fetchBreedsSuccess(response.data))\n      })\n      .catch(error => {\n        dispatch(fetchBreedsFailure(error.message))\n      })\n  }\n} \n","export const FETCH_CATS_REQUEST = 'FETCH_CATS_REQUEST'\nexport const FETCH_CATS_SUCCESS = 'FETCH_CATS_SUCCESS'\nexport const FETCH_CATS_FAILURE = 'FETCH_CATS_FAILURE'\nexport const INCREMENT_PAGINATION_PAGE = 'INCREMENT_PAGINATION_PAGE'\nexport const SELECTED_BREED_CHANGE = 'SELECTED_BREED_CHANGE' \n","import {\n  FETCH_CATS_REQUEST,\n  FETCH_CATS_SUCCESS,\n  FETCH_CATS_FAILURE,\n  INCREMENT_PAGINATION_PAGE,\n  SELECTED_BREED_CHANGE\n} from './CatTypes'\nimport { CatDetails } from '../../interfaces';\nimport { AppDispatch } from '../../redux/store';\nimport axios from 'axios';\n\nexport const fetchCatsRequest = () => {\n  return {\n    type: FETCH_CATS_REQUEST\n  }\n}\n\nexport const fetchCatsSuccess = (cats: Array<CatDetails>) => {\n  return {\n    type: FETCH_CATS_SUCCESS,\n    payload: cats\n  }\n}\n\nexport const fetchCatsFailure = (error: string) => {\n  return {\n    type: FETCH_CATS_FAILURE,\n    payload: error\n  }\n}\n\nexport const incrementPaginationPage = () => {\n  return {\n    type: INCREMENT_PAGINATION_PAGE\n  }\n}\n\nexport const selectedBreedChange = () => {\n  return {\n    type: SELECTED_BREED_CHANGE\n  }\n}\n\nexport const fetchCats = (breed_id: string, page: number) => {\n  return (dispatch: AppDispatch) => {\n    const options = {\n      headers: { 'x-api-key': process.env.REACT_APP_CAT_API_KEY },\n      params: { breed_id: breed_id, order: 'asc', limit: 5, page: page }\n    };\n    axios.get('https://api.thecatapi.com/v1/images/search', options)\n      .then(response => {\n        dispatch(fetchCatsSuccess(response.data))\n        dispatch(incrementPaginationPage())\n      })\n      .catch(error => {\n        dispatch(fetchCatsFailure(error.message))\n      })\n  }\n}\n","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport SelectionForm from '../components/SelectionForm';\nimport CatImage from '../components/CatImage';\nimport ActionRow from '../components/ActionRow';\nimport { Breed, CatDetails } from '../interfaces';\nimport {\n  selectBreed,\n  selectedBreedChange,\n  fetchBreeds,\n  fetchCats\n} from '../redux';\nimport { connect } from 'react-redux'\nimport { RootState } from '../redux/store';\n\ninterface Props {\n  loading: boolean,\n  breeds: Breed[],\n  cats: CatDetails[],\n  error: string,\n  selectedBreed: string,\n  paginationPage: number,\n  canLoadMore: boolean,\n  selectBreed: (breed_id: string) => void,\n  selectedBreedChange: () => void,\n  fetchBreeds: () => void,\n  fetchCats: (breed_id: string, page: number) => void \n}\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    loading: state.breed.loading || state.cat.loading,\n    breeds: state.breed.breeds,\n    cats: state.cat.cats,\n    breedError: state.breed.error,\n    catError: state.cat.error,\n    selectedBreed: state.breed.selectedBreed,\n    paginationPage: state.cat.paginationPage,\n    canLoadMore: state.cat.canLoadMore\n  }\n}\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    selectBreed: (breed_id: string) => dispatch(selectBreed(breed_id)),\n    selectedBreedChange: () => dispatch(selectedBreedChange()),\n    fetchBreeds: () => dispatch(fetchBreeds()),\n    fetchCats: (breed_id: string, page: number) => dispatch(fetchCats(breed_id, page))\n  }\n}\n\nclass Index extends Component<Props> {\n  onSelectBreed = async (event: React.ChangeEvent<any>) => {\n    const breed_id = event.target.value;\n    await this.props.selectBreed(breed_id);\n    await this.props.selectedBreedChange();\n    this.props.fetchCats(this.props.selectedBreed, this.props.paginationPage)\n  }\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col><h1 className=\"mt-3\">Cat Browser</h1></Col>\n        </Row>\n        <Row>\n          <Col md={{ span: 3 }} sm={{ span: 6 }}>\n            <SelectionForm wasChanged={this.onSelectBreed} selectedBreed={this.props.selectedBreed} breeds={this.props.breeds} />\n          </Col>\n        </Row>\n        <Row>\n          { (this.props.cats.length > 0) ?\n          this.props.cats.map((cat: CatDetails) => (\n            <CatImage catDetails={ cat } key={cat.id} />)\n          ) : <Col>No cats available</Col> }\n        </Row>\n        { this.props.canLoadMore ?\n          <ActionRow\n            isLoading={this.props.loading}\n            isDisabled={this.props.cats.length === 0}\n            wasClicked={() => this.props.fetchCats(this.props.selectedBreed, this.props.paginationPage)}\n          /> : null\n        }\n      </Container>\n    );\n  }\n\n  componentDidMount() {\n    this.props.fetchBreeds();\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index)\n","import React, { Component } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Card from 'react-bootstrap/Card';\nimport './Show.scss';\nimport { Link } from \"react-router-dom\";\nimport { RootState } from '../redux/store';\nimport { CatDetails } from '../interfaces';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\n\ninterface Props {\n  match: {\n    params: { id: string }\n  },\n  cats: CatDetails[]\n}\n\ninterface State {\n  catDetails?: CatDetails\n}\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    cats: state.cat.cats\n  }\n}\n\nclass Show extends Component<Props, State> {\n  render() {\n    return (\n      <Container>\n        { (this.state?.catDetails != null) ?\n        <Card>\n          <Card.Header>\n            <Link to=\"/\" className=\"btn btn-primary\">Back</Link>\n          </Card.Header>\n          <Card.Img variant=\"top\" src={ this.state?.catDetails?.url } />\n          <Card.Body>\n            <Card.Title>{ this.state?.catDetails?.breeds[0].name }</Card.Title>\n            <h6>Origin: { this.state?.catDetails?.breeds[0].origin }</h6>\n            <h6>{ this.state?.catDetails?.breeds[0].temperament }</h6>\n            <Card.Text>{ this.state?.catDetails?.breeds[0].description }</Card.Text>\n          </Card.Body>\n        </Card> : <h3 className=\"center-fixed\">Loading...</h3> }\n      </Container>\n    )\n  }\n\n  fetchCatImage() {\n    const image_id = this.props.match.params.id;\n    const options = {\n      headers: { 'x-api-key': process.env.REACT_APP_CAT_API_KEY },\n      params: { image_id: image_id }\n    };\n    axios.get('https://api.thecatapi.com/v1/images/' + image_id, options)\n      .then(response => {\n        this.setState({ catDetails: response.data });\n      })\n      .catch(error => {\n        console.log(error.message);\n      })\n  }\n\n  componentDidMount() {\n    const catDetails = this.props.cats.find(cat => cat.id === this.props.match.params.id );\n    if (catDetails == null) {\n      this.fetchCatImage()\n    } else {\n      this.setState({ catDetails: catDetails })\n    }\n  }\n}\n\nexport default connect(mapStateToProps)(Show)\n","import React, { Component } from 'react';\nimport './App.scss';\nimport Index from './cats/Index';\nimport Show from './cats/Show';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Index} />\n            <Route path=\"/:id\" component={Show} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  FETCH_BREEDS_REQUEST,\n  FETCH_BREEDS_SUCCESS,\n  FETCH_BREEDS_FAILURE,\n  SELECT_BREED\n} from './BreedTypes'\nimport { BreedState, ActionType } from '../../interfaces';\n\nconst initialState: BreedState = {\n  loading: false,\n  breeds: [],\n  error: '',\n  selectedBreed: 'DEFAULT'\n}\n\nconst reducer = (state: BreedState = initialState, action: ActionType): BreedState => {\n  switch(action.type) {\n    case FETCH_BREEDS_REQUEST:\n      return {\n        ...state,\n        loading: true\n      }\n    case FETCH_BREEDS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        breeds: action.payload,\n        error: ''\n      }\n    case FETCH_BREEDS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        breeds: [],\n        error: action.payload\n      }\n    case SELECT_BREED:\n      return {\n        ...state,\n        selectedBreed: action.payload\n      }\n    default: return { ...state }\n  }\n}\n\nexport default reducer\n","import {\n  FETCH_CATS_REQUEST,\n  FETCH_CATS_SUCCESS,\n  FETCH_CATS_FAILURE,\n  INCREMENT_PAGINATION_PAGE,\n  SELECTED_BREED_CHANGE,\n} from './CatTypes'\nimport { CatState, ActionType } from '../../interfaces';\n\nconst initialState: CatState = {\n  loading: false,\n  cats: [],\n  error: '',\n  paginationPage: 1,\n  canLoadMore: true\n}\n\nconst reducer = (state: CatState = initialState, action: ActionType): CatState => {\n  switch(action.type) {\n    case FETCH_CATS_REQUEST:\n      return {\n        ...state,\n        loading: true\n      }\n    case FETCH_CATS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        cats: [...state.cats, ...action.payload],\n        error: '',\n        canLoadMore: action.payload.length > 0\n      }\n    case FETCH_CATS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        cats: [],\n        error: action.payload\n      }\n    case INCREMENT_PAGINATION_PAGE:\n      return {\n        ...state,\n        paginationPage: state.paginationPage + 1\n      }\n    case SELECTED_BREED_CHANGE:\n      return {\n        ...state,\n        cats: [],\n        paginationPage: 1,\n        canLoadMore: true\n      }\n    default: return { ...state }\n  }\n}\n\nexport default reducer\n","import { createStore, applyMiddleware, Store, Dispatch, combineReducers } from 'redux'\nimport thunk from 'redux-thunk'\nimport breedReducer from './breed/BreedReducer' \nimport catReducer from './cat/CatReducer' \nimport { BreedState, CatState, ActionType } from '../interfaces';\n\ninterface CombineState {\n  breed: BreedState,\n  cat: CatState\n}\n\nconst store: Store<CombineState, ActionType> & {\n    dispatch: Dispatch\n} = createStore(combineReducers({\n  breed: breedReducer,\n  cat: catReducer\n}), applyMiddleware(thunk))\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n\nreportWebVitals();\n"],"sourceRoot":""}